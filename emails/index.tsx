import { Resend } from 'resend'
import PurchaseReceiptEmail from './purchase-receipt'
import { IOrder } from '@/lib/db/models/order.model'
import AskReviewOrderItemsEmail from './ask-review-order-items'
import OrderCancellationEmail from './order-cancellation'
import { SENDER_EMAIL, SENDER_NAME } from '@/lib/constants'

const resend = new Resend(process.env.RESEND_API_KEY as string)

export const sendPurchaseReceipt = async ({ order }: { order: IOrder }) => {
  try {
    if (!process.env.RESEND_API_KEY) {
      console.warn('‚ö†Ô∏è RESEND_API_KEY non configur√©. Email non envoy√©.')
      return { id: 'mock-id', error: 'RESEND_API_KEY not configured' }
    }

    const recipientEmail = (order.user as { email: string }).email
    console.log("üìß Tentative d'envoi de l'email de re√ßu...")
    console.log("üìß Destinataire:", recipientEmail)
    
    const result = await resend.emails.send({
      from: `${SENDER_NAME} <${SENDER_EMAIL}>`,
      to: recipientEmail,
      subject: 'Re√ßu de Paiement - Paiement Confirm√©', // ‚úÖ Sujet pour paiement
      react: <PurchaseReceiptEmail order={order} />,
    })
    
    // V√©rifier les erreurs Resend
    if (result.error) {
      console.error('‚ùå Erreur Resend:', JSON.stringify(result.error, null, 2))
      throw new Error(`Resend Error: ${JSON.stringify(result.error)}`)
    }
    
    console.log('‚úÖ Email de re√ßu envoy√© avec succ√®s. ID:', result.data?.id)
    return result
  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi de l'email de re√ßu:", error)
    throw error
  }
}

export const sendOrderConfirmation = async ({ order }: { order: IOrder }) => {
  try {
    if (!process.env.RESEND_API_KEY) {
      console.warn('‚ö†Ô∏è RESEND_API_KEY non configur√©. Email non envoy√©.')
      return { id: 'mock-id', error: 'RESEND_API_KEY not configured' }
    }

    const recipientEmail = (order.user as { email: string }).email
    console.log("üìß Tentative d'envoi de l'email de confirmation...")
    console.log("üìß Destinataire:", recipientEmail)
    
    const result = await resend.emails.send({
      from: `${SENDER_NAME} <${SENDER_EMAIL}>`,
      to: recipientEmail,
      subject: 'Confirmation de commande - Paiement √† la livraison', // ‚úÖ Sujet pour COD
      react: <PurchaseReceiptEmail order={order} />,
    })
    
    if (result.error) {
      console.error('‚ùå Erreur Resend:', JSON.stringify(result.error, null, 2))
      throw new Error(`Resend Error: ${JSON.stringify(result.error)}`)
    }
    
    console.log('‚úÖ Email de confirmation envoy√© avec succ√®s. ID:', result.data?.id)
    return result
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de l'envoi de l'email de confirmation:",
      error
    )
    throw error
  }
}

export const sendAskReviewOrderItems = async ({ order }: { order: IOrder }) => {
  try {
    if (!process.env.RESEND_API_KEY) {
      console.warn('‚ö†Ô∏è RESEND_API_KEY non configur√©. Email non envoy√©.')
      return { id: 'mock-id', error: 'RESEND_API_KEY not configured' }
    }

    const recipientEmail = (order.user as { email: string }).email
    console.log("üìß Tentative d'envoi de l'email de demande d'avis...")
    console.log("üìß Destinataire:", recipientEmail)
    
    const result = await resend.emails.send({
      from: `${SENDER_NAME} <${SENDER_EMAIL}>`,
      to: recipientEmail,
      subject: '√âvaluez Vos Articles de Commande', // ‚úÖ Sujet pour demande d'avis
      react: <AskReviewOrderItemsEmail order={order} />,
    })
    
    if (result.error) {
      console.error('‚ùå Erreur Resend:', JSON.stringify(result.error, null, 2))
      throw new Error(`Resend Error: ${JSON.stringify(result.error)}`)
    }
    
    console.log('‚úÖ Email de demande d\'avis envoy√© avec succ√®s. ID:', result.data?.id)
    return result
  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi de l'email de demande d'avis:", error)
    throw error
  }
}

export const sendOrderCancellationNotification = async ({
  order,
}: {
  order: IOrder
}) => {
  try {
    if (!process.env.RESEND_API_KEY) {
      console.warn('‚ö†Ô∏è RESEND_API_KEY non configur√©. Email non envoy√©.')
      return { id: 'mock-id', error: 'RESEND_API_KEY not configured' }
    }

    const recipientEmail = (order.user as { email: string }).email
    console.log("üìß Tentative d'envoi de l'email d'annulation...")
    console.log("üìß Destinataire:", recipientEmail)
    
    const result = await resend.emails.send({
      from: `${SENDER_NAME} <${SENDER_EMAIL}>`,
      to: recipientEmail,
      subject: "Commande Annul√©e - Confirmation d'annulation",
      react: <OrderCancellationEmail order={order} />,
    })
    
    if (result.error) {
      console.error('‚ùå Erreur Resend:', JSON.stringify(result.error, null, 2))
      throw new Error(`Resend Error: ${JSON.stringify(result.error)}`)
    }
    
    console.log("‚úÖ Email d'annulation envoy√© avec succ√®s. ID:", result.data?.id)
    return result
  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi de l'email d'annulation:", error)
    throw error
  }
}
