import { connectToDatabase } from '../lib/db/mongodb'
import Product from '../lib/db/models/product.model'
import Category from '../lib/db/models/category.model'
import { toSlug } from '../lib/utils'

async function migrateCategories() {
  try {
    await connectToDatabase()
    console.log('üöÄ D√©but de la migration des cat√©gories...')

    // 1. R√©cup√©rer toutes les cat√©gories uniques des produits
    const uniqueCategories = await Product.distinct('category')
    console.log(
      `üìã ${uniqueCategories.length} cat√©gories trouv√©es:`,
      uniqueCategories
    )

    // 2. Cr√©er les cat√©gories principales
    const createdCategories = new Map<string, string>() // name -> ObjectId

    for (const categoryName of uniqueCategories) {
      if (!categoryName) continue

      const slug = toSlug(categoryName)

      // V√©rifier si la cat√©gorie existe d√©j√†
      let existingCategory = await Category.findOne({ slug })

      if (!existingCategory) {
        const category = new Category({
          name: categoryName,
          slug,
          level: 0,
          isActive: true,
          sortOrder: 0,
        })

        await category.save()
        createdCategories.set(categoryName, category._id.toString())
        console.log(`‚úÖ Cat√©gorie cr√©√©e: ${categoryName}`)
      } else {
        createdCategories.set(categoryName, existingCategory._id.toString())
        console.log(`‚ÑπÔ∏è  Cat√©gorie existante: ${categoryName}`)
      }
    }

    // 3. Mettre √† jour les produits avec les nouveaux ObjectId de cat√©gories
    let updatedProducts = 0

    for (const [categoryName, categoryId] of createdCategories) {
      const result = await Product.updateMany(
        { category: categoryName },
        {
          $set: {
            category: categoryId,
            categoryName: categoryName, // Garder l'ancien nom pour r√©f√©rence
          },
        }
      )

      updatedProducts += result.modifiedCount
      console.log(
        `üîÑ ${result.modifiedCount} produits mis √† jour pour la cat√©gorie: ${categoryName}`
      )
    }

    console.log(`‚úÖ Migration termin√©e!`)
    console.log(`üìä R√©sum√©:`)
    console.log(`   - ${createdCategories.size} cat√©gories cr√©√©es/trouv√©es`)
    console.log(`   - ${updatedProducts} produits mis √† jour`)

    // 4. V√©rification
    const productsWithOldCategory = await Product.countDocuments({
      category: { $type: 'string' },
    })

    if (productsWithOldCategory > 0) {
      console.log(
        `‚ö†Ô∏è  ${productsWithOldCategory} produits ont encore l'ancien format de cat√©gorie`
      )
    } else {
      console.log(`‚úÖ Tous les produits ont √©t√© migr√©s avec succ√®s`)
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    throw error
  }
}

// Exemple de cr√©ation de sous-cat√©gories
async function createSampleSubCategories() {
  try {
    await connectToDatabase()
    console.log("üå± Cr√©ation d'exemples de sous-cat√©gories...")

    // Trouver la cat√©gorie "Computer Equipment"
    const computerCategory = await Category.findOne({
      slug: 'computer-equipment',
    })
    if (!computerCategory) {
      console.log('‚ùå Cat√©gorie "Computer Equipment" non trouv√©e')
      return
    }

    // Cr√©er des sous-cat√©gories pour Computer Equipment
    const subCategories = [
      { name: 'Laptops', description: 'Ordinateurs portables' },
      { name: 'Desktops', description: 'Ordinateurs de bureau' },
      { name: 'Monitors', description: '√âcrans et moniteurs' },
      { name: 'Keyboards', description: 'Claviers' },
      { name: 'Mice', description: 'Souris' },
    ]

    for (const subCat of subCategories) {
      const existing = await Category.findOne({ slug: toSlug(subCat.name) })
      if (!existing) {
        const category = new Category({
          name: subCat.name,
          slug: toSlug(subCat.name),
          description: subCat.description,
          parent: computerCategory._id,
          level: 1,
          isActive: true,
          sortOrder: 0,
        })

        await category.save()

        // Ajouter √† la liste des enfants du parent
        await Category.findByIdAndUpdate(computerCategory._id, {
          $addToSet: { children: category._id },
        })

        console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: ${subCat.name}`)
      } else {
        console.log(`‚ÑπÔ∏è  Sous-cat√©gorie existante: ${subCat.name}`)
      }
    }

    console.log('‚úÖ Exemples de sous-cat√©gories cr√©√©s!')
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des sous-cat√©gories:', error)
    throw error
  }
}

// Fonction principale
async function main() {
  try {
    await migrateCategories()
    await createSampleSubCategories()
    process.exit(0)
  } catch (error) {
    console.error('‚ùå Migration √©chou√©e:', error)
    process.exit(1)
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main()
}

export { migrateCategories, createSampleSubCategories }
