const { MongoClient } = require('mongodb')
const mongoose = require('mongoose')

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/nextjs-amazona'

// Fonction pour cr√©er un slug
function toSlug(text) {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9 -]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim('-')
}

// Sch√©ma Category
const categorySchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  slug: { type: String, required: true, unique: true, lowercase: true },
  description: { type: String, trim: true },
  image: { type: String },
  parent: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', default: null },
  children: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }],
  level: { type: Number, required: true, default: 0, min: 0, max: 3 },
  isActive: { type: Boolean, required: true, default: true },
  sortOrder: { type: Number, required: true, default: 0 },
}, { timestamps: true })

// Index
categorySchema.index({ parent: 1, isActive: 1 })
categorySchema.index({ level: 1, isActive: 1 })
categorySchema.index({ slug: 1 })

const Category = mongoose.model('Category', categorySchema)

// Sch√©ma Product (simplifi√© pour la migration)
const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  category: { type: String, required: true }, // Ancien format
  categoryName: { type: String, required: false }, // Nouveau champ
  // ... autres champs
}, { timestamps: true })

const Product = mongoose.model('Product', productSchema)

async function migrateCategories() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(MONGODB_URI)
    console.log('üöÄ Connexion √† la base de donn√©es √©tablie')
    console.log('üöÄ D√©but de la migration des cat√©gories...')

    // 1. R√©cup√©rer toutes les cat√©gories uniques des produits
    const uniqueCategories = await Product.distinct('category')
    console.log(`üìã ${uniqueCategories.length} cat√©gories trouv√©es:`, uniqueCategories)

    // 2. Cr√©er les cat√©gories principales
    const createdCategories = new Map() // name -> ObjectId

    for (const categoryName of uniqueCategories) {
      if (!categoryName) continue

      const slug = toSlug(categoryName)
      
      // V√©rifier si la cat√©gorie existe d√©j√†
      let existingCategory = await Category.findOne({ slug })
      
      if (!existingCategory) {
        const category = new Category({
          name: categoryName,
          slug,
          level: 0,
          isActive: true,
          sortOrder: 0,
        })
        
        await category.save()
        createdCategories.set(categoryName, category._id.toString())
        console.log(`‚úÖ Cat√©gorie cr√©√©e: ${categoryName}`)
      } else {
        createdCategories.set(categoryName, existingCategory._id.toString())
        console.log(`‚ÑπÔ∏è  Cat√©gorie existante: ${categoryName}`)
      }
    }

    // 3. Mettre √† jour les produits avec les nouveaux ObjectId de cat√©gories
    let updatedProducts = 0
    
    for (const [categoryName, categoryId] of createdCategories) {
      const result = await Product.updateMany(
        { category: categoryName },
        { 
          $set: { 
            category: categoryId,
            categoryName: categoryName // Garder l'ancien nom pour r√©f√©rence
          }
        }
      )
      
      updatedProducts += result.modifiedCount
      console.log(`üîÑ ${result.modifiedCount} produits mis √† jour pour la cat√©gorie: ${categoryName}`)
    }

    console.log(`‚úÖ Migration termin√©e!`)
    console.log(`üìä R√©sum√©:`)
    console.log(`   - ${createdCategories.size} cat√©gories cr√©√©es/trouv√©es`)
    console.log(`   - ${updatedProducts} produits mis √† jour`)

    // 4. V√©rification
    const productsWithOldCategory = await Product.countDocuments({ 
      category: { $type: 'string' } 
    })
    
    if (productsWithOldCategory > 0) {
      console.log(`‚ö†Ô∏è  ${productsWithOldCategory} produits ont encore l'ancien format de cat√©gorie`)
    } else {
      console.log(`‚úÖ Tous les produits ont √©t√© migr√©s avec succ√®s`)
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    throw error
  } finally {
    await mongoose.disconnect()
    console.log('üîå Connexion ferm√©e')
  }
}

// Exemple de cr√©ation de sous-cat√©gories
async function createSampleSubCategories() {
  try {
    await mongoose.connect(MONGODB_URI)
    console.log("üå± Cr√©ation d'exemples de sous-cat√©gories...")

    // Trouver la cat√©gorie "Computer Equipment"
    const computerCategory = await Category.findOne({ slug: 'computer-equipment' })
    if (!computerCategory) {
      console.log('‚ùå Cat√©gorie "Computer Equipment" non trouv√©e')
      return
    }

    // Cr√©er des sous-cat√©gories pour Computer Equipment
    const subCategories = [
      { name: 'Laptops', description: 'Ordinateurs portables' },
      { name: 'Desktops', description: 'Ordinateurs de bureau' },
      { name: 'Monitors', description: '√âcrans et moniteurs' },
      { name: 'Keyboards', description: 'Claviers' },
      { name: 'Mice', description: 'Souris' },
    ]

    for (const subCat of subCategories) {
      const existing = await Category.findOne({ slug: toSlug(subCat.name) })
      if (!existing) {
        const category = new Category({
          name: subCat.name,
          slug: toSlug(subCat.name),
          description: subCat.description,
          parent: computerCategory._id,
          level: 1,
          isActive: true,
          sortOrder: 0,
        })
        
        await category.save()
        
        // Ajouter √† la liste des enfants du parent
        await Category.findByIdAndUpdate(computerCategory._id, {
          $addToSet: { children: category._id }
        })
        
        console.log(`‚úÖ Sous-cat√©gorie cr√©√©e: ${subCat.name}`)
      } else {
        console.log(`‚ÑπÔ∏è  Sous-cat√©gorie existante: ${subCat.name}`)
      }
    }

    console.log('‚úÖ Exemples de sous-cat√©gories cr√©√©s!')

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des sous-cat√©gories:', error)
    throw error
  } finally {
    await mongoose.disconnect()
  }
}

// Fonction principale
async function main() {
  try {
    await migrateCategories()
    await createSampleSubCategories()
    process.exit(0)
  } catch (error) {
    console.error('‚ùå Migration √©chou√©e:', error)
    process.exit(1)
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main()
}

module.exports = { migrateCategories, createSampleSubCategories }
