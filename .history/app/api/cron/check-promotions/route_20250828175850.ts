import { NextRequest, NextResponse } from 'next/server'
import { checkAndUpdateExpiredPromotions } from '@/lib/actions/promotion.actions'

export async function GET(request: NextRequest) {
  try {
    // V√©rifier si c'est un appel cron l√©gitime (optionnel)
    const authHeader = request.headers.get('authorization')
    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      return NextResponse.json({ error: 'Non autoris√©' }, { status: 401 })
    }

    console.log('üïê V√©rification automatique des promotions expir√©es...')

    const result = await checkAndUpdateExpiredPromotions()

    if (result.success) {
      console.log(`‚úÖ ${result.updatedCount} promotions mises √† jour`)
      return NextResponse.json({
        success: true,
        message: `${result.updatedCount} promotions mises √† jour`,
        timestamp: new Date().toISOString(),
      })
    } else {
      console.error(
        '‚ùå Erreur lors de la v√©rification des promotions:',
        result.error
      )
      return NextResponse.json(
        {
          success: false,
          error: result.error,
        },
        { status: 500 }
      )
    }
  } catch (error) {
    console.error(
      '‚ùå Erreur critique lors de la v√©rification des promotions:',
      error
    )
    return NextResponse.json(
      {
        success: false,
        error: 'Erreur interne du serveur',
      },
      { status: 500 }
    )
  }
}

// Endpoint de test local (d√©veloppement uniquement)
export async function POST() {
  try {
    console.log('üß™ Test local de v√©rification des promotions...')

    const result = await checkAndUpdateExpiredPromotions()

    return NextResponse.json({
      success: true,
      message: `Test local termin√©: ${result.updatedCount} promotions mises √† jour`,
      timestamp: new Date().toISOString(),
      note: 'En d√©veloppement, appelez cette API manuellement pour tester',
    })
  } catch (error) {
    console.error('‚ùå Erreur lors du test local:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erreur lors du test local',
      },
      { status: 500 }
    )
  }
}
